@require: base/base
@require: base/option-ext
@require: base/string
@require: base/char
@require: base/eq

@import: sexp

module CrossRefExt-Type : sig

type 'a t

% `from-sexp (to-sexp x)` should be `Some x`
val make : (|
  to-sexp : 'a -> CrossRefExt-SExp.t;
  from-sexp : CrossRefExt-SExp.t -> 'a option;
  name : string;
|) -> 'a t
val to-sexp : ('a t) implicit -> 'a -> CrossRefExt-SExp.t
val from-sexp : ('a t) implicit -> CrossRefExt-SExp.t -> 'a option
val name : 'a t -> string
val to-string : ('a t) implicit -> 'a -> string
val read-from-string : ('a t) implicit -> string -> 'a option

val int : (int t) implicit
val string : (string t) implicit
val list : ('a t) implicit -> (('a list) t) implicit

% test if `from-sexp (to-sexp x) == x`
val test : ('a t) implicit -> ('a Eq.t) implicit -> 'a -> bool

end = struct

type sexp = CrossRefExt-SExp.t

type 'a t = (|
  to-sexp : 'a -> sexp;
  from-sexp : sexp -> 'a option;
  name : string;
|)

let make rec = rec
let to-sexp tp = tp#to-sexp
let from-sexp tp = tp#from-sexp
let name tp = tp#name

let to-string tp x = CrossRefExt-SExp.to-string (to-sexp tp x)

let read-from-string tp str =
CrossRefExt-SExp.read-from-string str
|> Option.and-then (from-sexp tp)

let from-sexp-def =
let f _ = Option.none in
(|
  symbol = f;
  string = f;
  int = f;
  list = f;
|)

let test tp eq x =
to-sexp tp x
|> from-sexp tp
|> Option.map-or false (fun y -> Eq.equal eq x y)

let int = make (|
  name = `int`;
  to-sexp = CrossRefExt-SExp.of-int;
  from-sexp = CrossRefExt-SExp.case (|
    from-sexp-def with
    int = Option.some;
  |);
|)

let string = make (|
  name = `string`;
  to-sexp = CrossRefExt-SExp.of-string;
  from-sexp = CrossRefExt-SExp.case (|
    from-sexp-def with
    string = Option.some;
  |);
|)

let sp = String.of-char Char.space

let list-header = CrossRefExt-SExp.of-symbol `List`

let list tp = make (|
  name = String.(concat [
    `(`; name tp; sp; `list`; `)`
  ]);
  to-sexp = fun ls -> (
    ls
    |> List.reverse-map (to-sexp tp)
    |> List.cons list-header
    |> CrossRefExt-SExp.of-list
  );
  from-sexp = CrossRefExt-SExp.case (|
    from-sexp-def with
    list = fun s-l -> (
      match s-l with
      | [] -> Option.none
      | s :: s-l1 -> (
        if Eq.equal CrossRefExt-SExp.eq s list-header then (
          Option.fold-list s-l1 (fun s1 x-l -> (
            from-sexp tp s1
            |> Option.map (fun x -> x :: x-l)
          )) []
        ) else Option.none
      )
    );
  |);
|)

end
